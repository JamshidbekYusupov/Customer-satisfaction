{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":36191,"databundleVersionId":3544842,"sourceType":"competition"}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:11:06.841817Z","iopub.execute_input":"2024-12-07T12:11:06.842192Z","iopub.status.idle":"2024-12-07T12:11:06.850139Z","shell.execute_reply.started":"2024-12-07T12:11:06.842156Z","shell.execute_reply":"2024-12-07T12:11:06.849020Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/aviakompaniya/sample_submission.csv\n/kaggle/input/aviakompaniya/train_dataset.csv\n/kaggle/input/aviakompaniya/test_dataset.csv\n","output_type":"stream"}],"execution_count":242},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/aviakompaniya/train_dataset.csv\")\ndf.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:11:08.965706Z","iopub.execute_input":"2024-12-07T12:11:08.968213Z","iopub.status.idle":"2024-12-07T12:11:09.022281Z","shell.execute_reply.started":"2024-12-07T12:11:08.968091Z","shell.execute_reply":"2024-12-07T12:11:09.021180Z"}},"outputs":[{"execution_count":243,"output_type":"execute_result","data":{"text/plain":"Index(['id', 'Gender', 'Customer Type', 'Age', 'Type of Travel', 'Class',\n       'Flight Distance', 'Inflight wifi service',\n       'Departure/Arrival time convenient', 'Ease of Online booking',\n       'Gate location', 'Food and drink', 'Online boarding', 'Seat comfort',\n       'Inflight entertainment', 'On-board service', 'Leg room service',\n       'Baggage handling', 'Checkin service', 'Inflight service',\n       'Cleanliness', 'Departure Delay in Minutes', 'Arrival Delay in Minutes',\n       'satisfaction'],\n      dtype='object')"},"metadata":{}}],"execution_count":243},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:11:11.244590Z","iopub.execute_input":"2024-12-07T12:11:11.245140Z","iopub.status.idle":"2024-12-07T12:11:11.253295Z","shell.execute_reply.started":"2024-12-07T12:11:11.245093Z","shell.execute_reply":"2024-12-07T12:11:11.252100Z"}},"outputs":[{"execution_count":244,"output_type":"execute_result","data":{"text/plain":"(10000, 24)"},"metadata":{}}],"execution_count":244},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:11:13.504842Z","iopub.execute_input":"2024-12-07T12:11:13.505221Z","iopub.status.idle":"2024-12-07T12:11:13.520168Z","shell.execute_reply.started":"2024-12-07T12:11:13.505188Z","shell.execute_reply":"2024-12-07T12:11:13.518986Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 24 columns):\n #   Column                             Non-Null Count  Dtype  \n---  ------                             --------------  -----  \n 0   id                                 10000 non-null  int64  \n 1   Gender                             10000 non-null  object \n 2   Customer Type                      10000 non-null  object \n 3   Age                                10000 non-null  int64  \n 4   Type of Travel                     10000 non-null  object \n 5   Class                              10000 non-null  object \n 6   Flight Distance                    10000 non-null  int64  \n 7   Inflight wifi service              10000 non-null  int64  \n 8   Departure/Arrival time convenient  10000 non-null  int64  \n 9   Ease of Online booking             10000 non-null  int64  \n 10  Gate location                      10000 non-null  int64  \n 11  Food and drink                     10000 non-null  int64  \n 12  Online boarding                    10000 non-null  int64  \n 13  Seat comfort                       10000 non-null  int64  \n 14  Inflight entertainment             10000 non-null  int64  \n 15  On-board service                   10000 non-null  int64  \n 16  Leg room service                   10000 non-null  int64  \n 17  Baggage handling                   10000 non-null  int64  \n 18  Checkin service                    10000 non-null  int64  \n 19  Inflight service                   10000 non-null  int64  \n 20  Cleanliness                        10000 non-null  int64  \n 21  Departure Delay in Minutes         10000 non-null  int64  \n 22  Arrival Delay in Minutes           9972 non-null   float64\n 23  satisfaction                       10000 non-null  int64  \ndtypes: float64(1), int64(19), object(4)\nmemory usage: 1.8+ MB\n","output_type":"stream"}],"execution_count":245},{"cell_type":"code","source":"df['Customer Type'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:11:17.795017Z","iopub.execute_input":"2024-12-07T12:11:17.796085Z","iopub.status.idle":"2024-12-07T12:11:17.805037Z","shell.execute_reply.started":"2024-12-07T12:11:17.796044Z","shell.execute_reply":"2024-12-07T12:11:17.803520Z"}},"outputs":[{"execution_count":246,"output_type":"execute_result","data":{"text/plain":"Customer Type\nLoyal Customer       8307\ndisloyal Customer    1693\nName: count, dtype: int64"},"metadata":{}}],"execution_count":246},{"cell_type":"code","source":"df[\"Gender\"].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:11:20.435793Z","iopub.execute_input":"2024-12-07T12:11:20.436226Z","iopub.status.idle":"2024-12-07T12:11:20.445203Z","shell.execute_reply.started":"2024-12-07T12:11:20.436190Z","shell.execute_reply":"2024-12-07T12:11:20.444283Z"}},"outputs":[{"execution_count":247,"output_type":"execute_result","data":{"text/plain":"Gender\nFemale    5169\nMale      4831\nName: count, dtype: int64"},"metadata":{}}],"execution_count":247},{"cell_type":"code","source":"df['Type of Travel'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:11:22.944790Z","iopub.execute_input":"2024-12-07T12:11:22.945813Z","iopub.status.idle":"2024-12-07T12:11:22.954402Z","shell.execute_reply.started":"2024-12-07T12:11:22.945756Z","shell.execute_reply":"2024-12-07T12:11:22.953295Z"}},"outputs":[{"execution_count":248,"output_type":"execute_result","data":{"text/plain":"Type of Travel\nBusiness travel    7079\nPersonal Travel    2921\nName: count, dtype: int64"},"metadata":{}}],"execution_count":248},{"cell_type":"code","source":"df['Class'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:11:24.747717Z","iopub.execute_input":"2024-12-07T12:11:24.748269Z","iopub.status.idle":"2024-12-07T12:11:24.760242Z","shell.execute_reply.started":"2024-12-07T12:11:24.748212Z","shell.execute_reply":"2024-12-07T12:11:24.758774Z"}},"outputs":[{"execution_count":249,"output_type":"execute_result","data":{"text/plain":"Class\nBusiness    5048\nEco         4251\nEco Plus     701\nName: count, dtype: int64"},"metadata":{}}],"execution_count":249},{"cell_type":"code","source":"df.dropna(inplace = True)\ndf.drop('id', axis = 1, inplace = True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:11:26.775811Z","iopub.execute_input":"2024-12-07T12:11:26.776209Z","iopub.status.idle":"2024-12-07T12:11:26.787956Z","shell.execute_reply.started":"2024-12-07T12:11:26.776171Z","shell.execute_reply":"2024-12-07T12:11:26.786770Z"}},"outputs":[],"execution_count":250},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:12:07.886299Z","iopub.execute_input":"2024-12-07T12:12:07.886667Z","iopub.status.idle":"2024-12-07T12:12:07.891919Z","shell.execute_reply.started":"2024-12-07T12:12:07.886633Z","shell.execute_reply":"2024-12-07T12:12:07.890636Z"}},"outputs":[],"execution_count":256},{"cell_type":"code","source":"df['Gender'] = encoder.fit_transform(df['Gender'])\ndf['Customer Type'] = encoder.fit_transform(df['Customer Type'])\ndf['Type of Travel'] = encoder.fit_transform(df['Type of Travel'])\ndf['Class'] = encoder.fit_transform(df['Class'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:12:09.843558Z","iopub.execute_input":"2024-12-07T12:12:09.844497Z","iopub.status.idle":"2024-12-07T12:12:09.852802Z","shell.execute_reply.started":"2024-12-07T12:12:09.844457Z","shell.execute_reply":"2024-12-07T12:12:09.851697Z"}},"outputs":[],"execution_count":257},{"cell_type":"code","source":"X = df.drop(\"satisfaction\", axis = 1)\ny = df['satisfaction'].copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:12:13.844322Z","iopub.execute_input":"2024-12-07T12:12:13.844716Z","iopub.status.idle":"2024-12-07T12:12:13.852160Z","shell.execute_reply.started":"2024-12-07T12:12:13.844678Z","shell.execute_reply":"2024-12-07T12:12:13.850929Z"}},"outputs":[],"execution_count":258},{"cell_type":"code","source":"X.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:12:21.743831Z","iopub.execute_input":"2024-12-07T12:12:21.744227Z","iopub.status.idle":"2024-12-07T12:12:21.759306Z","shell.execute_reply.started":"2024-12-07T12:12:21.744190Z","shell.execute_reply":"2024-12-07T12:12:21.758086Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 9972 entries, 0 to 9999\nData columns (total 22 columns):\n #   Column                             Non-Null Count  Dtype  \n---  ------                             --------------  -----  \n 0   Gender                             9972 non-null   int64  \n 1   Customer Type                      9972 non-null   int64  \n 2   Age                                9972 non-null   int64  \n 3   Type of Travel                     9972 non-null   int64  \n 4   Class                              9972 non-null   int64  \n 5   Flight Distance                    9972 non-null   int64  \n 6   Inflight wifi service              9972 non-null   int64  \n 7   Departure/Arrival time convenient  9972 non-null   int64  \n 8   Ease of Online booking             9972 non-null   int64  \n 9   Gate location                      9972 non-null   int64  \n 10  Food and drink                     9972 non-null   int64  \n 11  Online boarding                    9972 non-null   int64  \n 12  Seat comfort                       9972 non-null   int64  \n 13  Inflight entertainment             9972 non-null   int64  \n 14  On-board service                   9972 non-null   int64  \n 15  Leg room service                   9972 non-null   int64  \n 16  Baggage handling                   9972 non-null   int64  \n 17  Checkin service                    9972 non-null   int64  \n 18  Inflight service                   9972 non-null   int64  \n 19  Cleanliness                        9972 non-null   int64  \n 20  Departure Delay in Minutes         9972 non-null   int64  \n 21  Arrival Delay in Minutes           9972 non-null   float64\ndtypes: float64(1), int64(21)\nmemory usage: 1.7 MB\n","output_type":"stream"}],"execution_count":259},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nX = scaler.fit_transform(X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:12:32.003948Z","iopub.execute_input":"2024-12-07T12:12:32.004369Z","iopub.status.idle":"2024-12-07T12:12:32.018782Z","shell.execute_reply.started":"2024-12-07T12:12:32.004334Z","shell.execute_reply":"2024-12-07T12:12:32.017779Z"}},"outputs":[],"execution_count":260},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split(X,y, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:12:55.403788Z","iopub.execute_input":"2024-12-07T12:12:55.404172Z","iopub.status.idle":"2024-12-07T12:12:55.413485Z","shell.execute_reply.started":"2024-12-07T12:12:55.404137Z","shell.execute_reply":"2024-12-07T12:12:55.412238Z"}},"outputs":[],"execution_count":261},{"cell_type":"code","source":"X_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:13:13.442863Z","iopub.execute_input":"2024-12-07T12:13:13.443265Z","iopub.status.idle":"2024-12-07T12:13:13.451279Z","shell.execute_reply.started":"2024-12-07T12:13:13.443227Z","shell.execute_reply":"2024-12-07T12:13:13.450042Z"}},"outputs":[{"execution_count":262,"output_type":"execute_result","data":{"text/plain":"array([[-0.9660784 , -0.45156575, -0.36061938, ...,  0.52464608,\n        -0.33691172, -0.36733993],\n       [ 1.03511267, -0.45156575, -0.22625368, ..., -0.23800271,\n        -0.36219892, -0.36733993],\n       [-0.9660784 , -0.45156575,  0.04247773, ...,  1.28729488,\n         0.16883243,  0.13210635],\n       ...,\n       [-0.9660784 , -0.45156575,  0.84867193, ...,  1.28729488,\n        -0.36219892, -0.36733993],\n       [-0.9660784 , -0.45156575, -0.36061938, ..., -0.23800271,\n        -0.18518847, -0.36733993],\n       [ 1.03511267, -0.45156575,  0.24402628, ...,  1.28729488,\n         0.62400216,  0.53166337]])"},"metadata":{}}],"execution_count":262},{"cell_type":"code","source":"dtmodel = DecisionTreeClassifier()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:13:20.195239Z","iopub.execute_input":"2024-12-07T12:13:20.195641Z","iopub.status.idle":"2024-12-07T12:13:20.200503Z","shell.execute_reply.started":"2024-12-07T12:13:20.195603Z","shell.execute_reply":"2024-12-07T12:13:20.199314Z"}},"outputs":[],"execution_count":263},{"cell_type":"code","source":"dtmodel.fit(X_train, Y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:13:55.604161Z","iopub.execute_input":"2024-12-07T12:13:55.604727Z","iopub.status.idle":"2024-12-07T12:13:55.656039Z","shell.execute_reply.started":"2024-12-07T12:13:55.604669Z","shell.execute_reply":"2024-12-07T12:13:55.654997Z"}},"outputs":[{"execution_count":265,"output_type":"execute_result","data":{"text/plain":"DecisionTreeClassifier()","text/html":"<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" checked><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":265},{"cell_type":"code","source":"predicted = dtmodel.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:14:07.525683Z","iopub.execute_input":"2024-12-07T12:14:07.526127Z","iopub.status.idle":"2024-12-07T12:14:07.532258Z","shell.execute_reply.started":"2024-12-07T12:14:07.526089Z","shell.execute_reply":"2024-12-07T12:14:07.530883Z"}},"outputs":[],"execution_count":266},{"cell_type":"code","source":"from sklearn.metrics import classification_report\nprint(classification_report(predicted, Y_test))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:14:17.089682Z","iopub.execute_input":"2024-12-07T12:14:17.090081Z","iopub.status.idle":"2024-12-07T12:14:17.108400Z","shell.execute_reply.started":"2024-12-07T12:14:17.090047Z","shell.execute_reply":"2024-12-07T12:14:17.107298Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.92      0.93      0.93      1004\n           1       0.93      0.92      0.92       991\n\n    accuracy                           0.92      1995\n   macro avg       0.92      0.92      0.92      1995\nweighted avg       0.92      0.92      0.92      1995\n\n","output_type":"stream"}],"execution_count":267},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:14:32.724707Z","iopub.execute_input":"2024-12-07T12:14:32.725144Z","iopub.status.idle":"2024-12-07T12:14:32.730137Z","shell.execute_reply.started":"2024-12-07T12:14:32.725104Z","shell.execute_reply":"2024-12-07T12:14:32.728922Z"}},"outputs":[],"execution_count":269},{"cell_type":"code","source":"sns.heatmap(confusion_matrix(Y_test, predicted), annot = True, fmt='g')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:14:49.923702Z","iopub.execute_input":"2024-12-07T12:14:49.924125Z","iopub.status.idle":"2024-12-07T12:14:50.169583Z","shell.execute_reply.started":"2024-12-07T12:14:49.924088Z","shell.execute_reply":"2024-12-07T12:14:50.168461Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":270},{"cell_type":"markdown","source":"**Here for the Decision Tree Classifier we are not satisfied with the result, so decided to use Random Forest Classifier to make the accuracy higher.** \n","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\n\n#For the first time we can get the n_estimators by assuming, later we use Grid Search\nrfmodel = RandomForestClassifier(n_estimators= 6)\n\nrfmodel.fit(X_train, Y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:15:30.885120Z","iopub.execute_input":"2024-12-07T12:15:30.885536Z","iopub.status.idle":"2024-12-07T12:15:30.957951Z","shell.execute_reply.started":"2024-12-07T12:15:30.885495Z","shell.execute_reply":"2024-12-07T12:15:30.956869Z"}},"outputs":[{"execution_count":271,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier(n_estimators=6)","text/html":"<style>#sk-container-id-9 {color: black;background-color: white;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_estimators=6)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" checked><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_estimators=6)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":271},{"cell_type":"code","source":"rf_predicted = rfmodel.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:15:48.526126Z","iopub.execute_input":"2024-12-07T12:15:48.526484Z","iopub.status.idle":"2024-12-07T12:15:48.535749Z","shell.execute_reply.started":"2024-12-07T12:15:48.526451Z","shell.execute_reply":"2024-12-07T12:15:48.534677Z"}},"outputs":[],"execution_count":274},{"cell_type":"code","source":"sns.heatmap(confusion_matrix(Y_test, rf_predicted), annot = True, fmt='g')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:16:04.354771Z","iopub.execute_input":"2024-12-07T12:16:04.355179Z","iopub.status.idle":"2024-12-07T12:16:04.572017Z","shell.execute_reply.started":"2024-12-07T12:16:04.355144Z","shell.execute_reply":"2024-12-07T12:16:04.570937Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":275},{"cell_type":"code","source":"from sklearn.metrics import classification_report\nprint(classification_report(rf_predicted, Y_test))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:16:15.803978Z","iopub.execute_input":"2024-12-07T12:16:15.804347Z","iopub.status.idle":"2024-12-07T12:16:15.823032Z","shell.execute_reply.started":"2024-12-07T12:16:15.804314Z","shell.execute_reply":"2024-12-07T12:16:15.822029Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.96      0.90      0.93      1073\n           1       0.90      0.95      0.92       922\n\n    accuracy                           0.93      1995\n   macro avg       0.93      0.93      0.93      1995\nweighted avg       0.93      0.93      0.93      1995\n\n","output_type":"stream"}],"execution_count":276},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\n\nprint(accuracy_score(rf_predicted, test_y))\nprint(accuracy_score(predicted, test_y))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:16:23.952593Z","iopub.execute_input":"2024-12-07T12:16:23.953045Z","iopub.status.idle":"2024-12-07T12:16:23.963158Z","shell.execute_reply.started":"2024-12-07T12:16:23.953005Z","shell.execute_reply":"2024-12-07T12:16:23.961655Z"}},"outputs":[{"name":"stdout","text":"0.9268170426065163\n0.9243107769423559\n","output_type":"stream"}],"execution_count":277},{"cell_type":"code","source":"#Here we are using Grid Search to find to n_estimator, this helps to make the accuracy higher.\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = {'n_estimators':np.arange(1,35)}\n\nrfmodel_gscv = GridSearchCV(rfmodel, param_grid, cv = 5)\nrfmodel_gscv.fit(X,y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:31:06.869823Z","iopub.execute_input":"2024-12-07T12:31:06.870226Z","iopub.status.idle":"2024-12-07T12:31:35.174026Z","shell.execute_reply.started":"2024-12-07T12:31:06.870190Z","shell.execute_reply":"2024-12-07T12:31:35.172811Z"}},"outputs":[{"execution_count":325,"output_type":"execute_result","data":{"text/plain":"GridSearchCV(cv=5, estimator=RandomForestClassifier(n_estimators=6),\n             param_grid={'n_estimators': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])})","text/html":"<style>#sk-container-id-21 {color: black;background-color: white;}#sk-container-id-21 pre{padding: 0;}#sk-container-id-21 div.sk-toggleable {background-color: white;}#sk-container-id-21 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-21 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-21 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-21 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-21 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-21 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-21 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-21 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-21 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-21 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-21 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-21 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-21 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-21 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-21 div.sk-item {position: relative;z-index: 1;}#sk-container-id-21 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-21 div.sk-item::before, #sk-container-id-21 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-21 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-21 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-21 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-21 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-21 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-21 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-21 div.sk-label-container {text-align: center;}#sk-container-id-21 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-21 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-21\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(n_estimators=6),\n             param_grid={&#x27;n_estimators&#x27;: array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-35\" type=\"checkbox\" ><label for=\"sk-estimator-id-35\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(n_estimators=6),\n             param_grid={&#x27;n_estimators&#x27;: array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-36\" type=\"checkbox\" ><label for=\"sk-estimator-id-36\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_estimators=6)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-37\" type=\"checkbox\" ><label for=\"sk-estimator-id-37\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_estimators=6)</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":325},{"cell_type":"code","source":"rfmodel_gscv.best_params_","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:31:38.594550Z","iopub.execute_input":"2024-12-07T12:31:38.594952Z","iopub.status.idle":"2024-12-07T12:31:38.602089Z","shell.execute_reply.started":"2024-12-07T12:31:38.594917Z","shell.execute_reply":"2024-12-07T12:31:38.600765Z"}},"outputs":[{"execution_count":326,"output_type":"execute_result","data":{"text/plain":"{'n_estimators': 31}"},"metadata":{}}],"execution_count":326},{"cell_type":"code","source":"\n#Hers N_estimator is 31. \nrfmodel2 = RandomForestClassifier(n_estimators= 31)\n\nrfmodel2.fit(X_train, Y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:31:48.677877Z","iopub.execute_input":"2024-12-07T12:31:48.678260Z","iopub.status.idle":"2024-12-07T12:31:48.977605Z","shell.execute_reply.started":"2024-12-07T12:31:48.678224Z","shell.execute_reply":"2024-12-07T12:31:48.976142Z"}},"outputs":[{"execution_count":328,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier(n_estimators=31)","text/html":"<style>#sk-container-id-23 {color: black;background-color: white;}#sk-container-id-23 pre{padding: 0;}#sk-container-id-23 div.sk-toggleable {background-color: white;}#sk-container-id-23 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-23 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-23 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-23 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-23 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-23 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-23 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-23 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-23 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-23 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-23 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-23 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-23 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-23 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-23 div.sk-item {position: relative;z-index: 1;}#sk-container-id-23 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-23 div.sk-item::before, #sk-container-id-23 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-23 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-23 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-23 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-23 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-23 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-23 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-23 div.sk-label-container {text-align: center;}#sk-container-id-23 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-23 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-23\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_estimators=31)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-39\" type=\"checkbox\" checked><label for=\"sk-estimator-id-39\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_estimators=31)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":328},{"cell_type":"code","source":"rf2_predicted = rfmodel2.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:31:51.433794Z","iopub.execute_input":"2024-12-07T12:31:51.434201Z","iopub.status.idle":"2024-12-07T12:31:51.451800Z","shell.execute_reply.started":"2024-12-07T12:31:51.434156Z","shell.execute_reply":"2024-12-07T12:31:51.450673Z"}},"outputs":[],"execution_count":329},{"cell_type":"code","source":"print(classification_report(rf2_predicted, Y_test))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:31:55.771686Z","iopub.execute_input":"2024-12-07T12:31:55.772104Z","iopub.status.idle":"2024-12-07T12:31:55.789499Z","shell.execute_reply.started":"2024-12-07T12:31:55.772067Z","shell.execute_reply":"2024-12-07T12:31:55.788103Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.96      0.95      0.95      1031\n           1       0.94      0.96      0.95       964\n\n    accuracy                           0.95      1995\n   macro avg       0.95      0.95      0.95      1995\nweighted avg       0.95      0.95      0.95      1995\n\n","output_type":"stream"}],"execution_count":330},{"cell_type":"code","source":"sns.heatmap(confusion_matrix(Y_test, rf2_predicted), annot = True, fmt='g')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:31:58.869099Z","iopub.execute_input":"2024-12-07T12:31:58.869484Z","iopub.status.idle":"2024-12-07T12:31:59.096861Z","shell.execute_reply.started":"2024-12-07T12:31:58.869446Z","shell.execute_reply":"2024-12-07T12:31:59.095866Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":331},{"cell_type":"code","source":"print(accuracy_score(rf2_predicted, Y_test))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T12:32:04.259723Z","iopub.execute_input":"2024-12-07T12:32:04.260164Z","iopub.status.idle":"2024-12-07T12:32:04.267874Z","shell.execute_reply.started":"2024-12-07T12:32:04.260126Z","shell.execute_reply":"2024-12-07T12:32:04.266723Z"}},"outputs":[{"name":"stdout","text":"0.9538847117794487\n","output_type":"stream"}],"execution_count":332},{"cell_type":"code","source":"# We are satisffied with our result, so we can stop here for now, if we want, we can contiune\n#trying another models or such as XGBUST for the Decision Tree Classier as supporter. \n\n#Thank you for the checking this model(s). \n\n# Jamshidbek Yusupov. ","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}